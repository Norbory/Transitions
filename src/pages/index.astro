---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Welcome to Astro.">
	<main class="px-64">
		<h1
			class="text-7xl font-bold pt-4"
		>
			Patrones de arquitectura
		</h1>
		<h3
			class="text-base text-gray-500 pb-2"
		>
			Creado por:
			<strong>
				Angelo Mandros
			</strong>
		</h3>
		<p class="text-xl">
			¿Alguna vez se preguntó cómo se diseñan los grandes sistemas empresariales? Antes de que comience un importante desarrollo de software, debemos elegir una arquitectura adecuada que nos proporcione la funcionalidad deseada y los atributos de calidad. Por lo tanto, debemos entender diferentes arquitecturas, antes de aplicarlas a nuestro diseño.
		</p>
		<picture class="flex justify-center py-4">
			<img 
				alt="Patron de arquitectura" 
				class="bh nl nm c" 
				width="700" 
				height="350"
				loading="eager" 
				role="presentation" 
				src="https://miro.medium.com/v2/resize:fit:700/1*M22DR3WPqbWXWidYIq2GwA.png"
			>
		</picture>
		<p class="text-xl py-2">
			Los patrones de arquitectura son soluciones reutilizables para problemas comunes en el diseño de software. Estos patrones ayudan a los desarrolladores a crear sistemas más robustos y mantenibles.
		</p>
		<div class="flex justify-center text-white">
			<div class="pulser my-12 flex justify-center items-center">
				<svg class="h-32" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
					<path d="M4 12.6111L8.92308 17.5L20 6.5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
				</svg>
			</div>
		</div>
		<p class="text-xl py-2">
			Un ejemplo de patrón de arquitectura es el patrón MVC (Modelo-Vista-Controlador), que separa la lógica de negocio, la interfaz de usuario y el control de flujo en tres componentes distintos.
		</p>
		<picture class="flex justify-center py-4">
			<img 
				alt="Patron de arquitectura" 
				class="patron bh nl nm c" 
				width="700" 
				height="350"
				loading="eager" 
				role="presentation" 
				src="https://gustavopeiretti.com/patrones-de-diseno-que-debes-conocer/desing-pattern-types.jpg"
			>
		</picture>
		<p class="text-xl py-2">
			Otro patrón común es el patrón de Microservicios, que divide una aplicación en servicios pequeños e independientes que se comunican entre sí a través de APIs.
		</p>
		<div class="flex text-white">
			<div class="demo my-12 flex justify-center items-center">
				<svg class="w-12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
					<path d="M4 12.6111L8.92308 17.5L20 6.5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
				</svg>
			</div>
		</div>
		<div class="flex justify-center my-4">
			<div class="loader text-indigo-500 flex justify-center items-center">
				<svg class="h-16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
					<path d="M13 3H8.2C7.0799 3 6.51984 3 6.09202 3.21799C5.71569 3.40973 5.40973 3.71569 5.21799 4.09202C5 4.51984 5 5.0799 5 6.2V17.8C5 18.9201 5 19.4802 5.21799 19.908C5.40973 20.2843 5.71569 20.5903 6.09202 20.782C6.51984 21 7.0799 21 8.2 21H12M13 3L19 9M13 3V7.4C13 7.96005 13 8.24008 13.109 8.45399C13.2049 8.64215 13.3578 8.79513 13.546 8.89101C13.7599 9 14.0399 9 14.6 9H19M19 9V11M9 17H11M9 13H13M9 9H10M19.2686 19.2686L21 21M20 17.5C20 18.8807 18.8807 20 17.5 20C16.1193 20 15 18.8807 15 17.5C15 16.1193 16.1193 15 17.5 15C18.8807 15 20 16.1193 20 17.5Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
				</svg>
			</div>
		</div>
		<div class="flex justify-center my-4 mb-12">
			<div class="envio text-indigo-600 flex justify-center items-center">
				<!-- <div class="reglon h-2 w-12"></div> -->
				<svg class="h-16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
					<path d="M18 7H18.01M15 7H15.01M18 17H18.01M15 17H15.01M6 10H18C18.9319 10 19.3978 10 19.7654 9.84776C20.2554 9.64477 20.6448 9.25542 20.8478 8.76537C21 8.39782 21 7.93188 21 7C21 6.06812 21 5.60218 20.8478 5.23463C20.6448 4.74458 20.2554 4.35523 19.7654 4.15224C19.3978 4 18.9319 4 18 4H6C5.06812 4 4.60218 4 4.23463 4.15224C3.74458 4.35523 3.35523 4.74458 3.15224 5.23463C3 5.60218 3 6.06812 3 7C3 7.93188 3 8.39782 3.15224 8.76537C3.35523 9.25542 3.74458 9.64477 4.23463 9.84776C4.60218 10 5.06812 10 6 10ZM6 20H18C18.9319 20 19.3978 20 19.7654 19.8478C20.2554 19.6448 20.6448 19.2554 20.8478 18.7654C21 18.3978 21 17.9319 21 17C21 16.0681 21 15.6022 20.8478 15.2346C20.6448 14.7446 20.2554 14.3552 19.7654 14.1522C19.3978 14 18.9319 14 18 14H6C5.06812 14 4.60218 14 4.23463 14.1522C3.74458 14.3552 3.35523 14.7446 3.15224 15.2346C3 15.6022 3 16.0681 3 17C3 17.9319 3 18.3978 3.15224 18.7654C3.35523 19.2554 3.74458 19.6448 4.23463 19.8478C4.60218 20 5.06812 20 6 20Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
				</svg>
			</div>
		</div>
	</main>
</Layout>
<style>
	.envio {
		height: 100px;
		width: 200px;
		position: relative;
		border: 5px solid #f3f3f3;
	}
	.envio::after {
		content: '';
		position: absolute;
		transform-origin: left;
		width: 50px;
		height: 100px;
		border-top: 6px solid #3498db;
		animation: borde_superior 2s linear infinite;
	}
	@keyframes borde_superior {
		0% {
			left: 0;
			transform: scaleX(0);
		}
		20% {
			left: 0;
			transform: scaleX(1);
		}
		100% {
			left: 100%;
			transform: translateX(-50px);
		}
	}
	.loader::after {
		animation: spin 2s linear infinite;
	}
	.loader {
		width: 100px;
		height: 100px;
		border-radius: 50%;
		position: relative;
	}
	.loader::after {
		content: '';
		position: absolute;
		width: 100px;
		height: 100px;
		border-radius: 50%;
		border: 10px solid #f3f3f3;
		border-top: 10px solid #3498db;
		border-radius: 50%;
	}
	@keyframes spin {
		0% {
			transform: rotate(0deg);
		}
		100% {
			transform: rotate(360deg);
		}
	}
	.patron {
		animation: reveal linear forwards;
		animation-timeline: view(10% 10%);
	}
	@keyframes reveal {
		from {
			opacity: 0;
			clip-path: inset(45% 20% 45% 20%);
		} 60% {
			opacity: 1;
			clip-path: inset(0% 0% 0% 0%);
		}
	}
	.pulser {
		width: 200px;
		height: 200px;
		background: rebeccapurple;
		border-radius: 50%;
		position: relative;
	}
	.pulser::after {
		animation: pulse 1500ms cubic-bezier(0.9, 0.7, 0.5, 0.9) infinite;
	}
	@keyframes pulse {
		0% {
			opacity: 0;
		}
		50% {
			transform: scale(1.4);
			opacity: 0.4;
		}
	}

	.pulser::after {
		content: '';
		position: absolute;
		width: 100%;
		height: 100%;
		top: 0;
		left: 0;
		background: blueviolet;
		border-radius: 50%;
		z-index: -1;
	}
	.demo {
		animation: move;
		animation-duration: 2s;
		animation-iteration-count: infinite;
		animation-direction: alternate;
	}
	
	.demo:hover {
		animation-play-state: paused;
	}

	@keyframes move {
		from {
			transform: translateX(0%);
		}
		to {
			transform: translateX(100%);
			background: powderblue;
		}
	}

	/* presentational styles */
	.demo {
		width: 50px;
		height: 50px;
		background: royalblue;
	}
</style>
